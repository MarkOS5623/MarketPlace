// <auto-generated />
using MarketPlace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MarketPlace.Models.Address", b =>
                {
                    b.Property<string>("AddressID")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int>("ApartmentNum")
                        .HasColumnType("int");

                    b.Property<int>("FloorNum")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressID");

                    b.HasIndex("User_ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("MarketPlace.Models.CreditCard", b =>
                {
                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("CVV")
                        .HasColumnType("int");

                    b.Property<int>("ExpMonth")
                        .HasColumnType("int");

                    b.Property<int>("ExpYear")
                        .HasColumnType("int");

                    b.Property<string>("Israeli_ID")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("Save")
                        .HasColumnType("bit");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("CardNumber");

                    b.HasIndex("User_ID");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("MarketPlace.Models.Item", b =>
                {
                    b.Property<string>("ItemID")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderID")
                        .HasColumnType("nvarchar(4)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemID");

                    b.HasIndex("OrderID");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("MarketPlace.Models.Order", b =>
                {
                    b.Property<string>("OrderID")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("AddressID")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.Property<double>("Totalprice")
                        .HasColumnType("float");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)");

                    b.HasKey("OrderID");

                    b.HasIndex("AddressID");

                    b.HasIndex("User_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MarketPlace.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<bool>("Admin")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("KeepLoggedIn")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Trader")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MarketPlace.Models.Address", b =>
                {
                    b.HasOne("MarketPlace.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketPlace.Models.CreditCard", b =>
                {
                    b.HasOne("MarketPlace.Models.User", "User")
                        .WithMany("CreditCards")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MarketPlace.Models.Item", b =>
                {
                    b.HasOne("MarketPlace.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("MarketPlace.Models.Order", b =>
                {
                    b.HasOne("MarketPlace.Models.Address", "address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MarketPlace.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("address");
                });

            modelBuilder.Entity("MarketPlace.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("MarketPlace.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CreditCards");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
